/* Generated By:JavaCC: Do not edit this line. MiniJavaParser.java */
package compiler.javacc;

public class MiniJavaParser implements MiniJavaParserConstants {

	// The following is a simple grammar that will allow you
	// to test the generated lexer.

	// Grammar.
	static final public void Goal() throws ParseException {
		MainClass();
		label_1: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case CLASS:
				;
				break;
			default:
				jj_la1[0] = jj_gen;
				break label_1;
			}
			ClassDeclaration();
		}
		jj_consume_token(0);
	}

	static final public void MainClass() throws ParseException {
		jj_consume_token(CLASS);
		Identifier();
		jj_consume_token(35);
		jj_consume_token(PUBLIC);
		jj_consume_token(STATIC);
		jj_consume_token(VOID);
		jj_consume_token(MAIN);
		jj_consume_token(36);
		jj_consume_token(STRING);
		jj_consume_token(37);
		jj_consume_token(38);
		Identifier();
		jj_consume_token(39);
		jj_consume_token(35);
		Statement();
		jj_consume_token(40);
		jj_consume_token(40);
	}

	static final public void ClassDeclaration() throws ParseException {
		jj_consume_token(CLASS);
		Identifier();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case EXTENDS:
			jj_consume_token(EXTENDS);
			Identifier();
			break;
		default:
			jj_la1[1] = jj_gen;
			;
		}
		jj_consume_token(35);
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case INT:
			case BOOLEAN:
			case ID:
				;
				break;
			default:
				jj_la1[2] = jj_gen;
				break label_2;
			}
			VarDeclaration();
		}
		label_3: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case PUBLIC:
				;
				break;
			default:
				jj_la1[3] = jj_gen;
				break label_3;
			}
			MethodDeclaration();
		}
		jj_consume_token(40);
	}

	static final public void VarDeclaration() throws ParseException {
		Type();
		Identifier();
		jj_consume_token(41);
	}

	static final public void MethodDeclaration() throws ParseException {
		jj_consume_token(PUBLIC);
		Type();
		Identifier();
		jj_consume_token(36);
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case INT:
		case BOOLEAN:
		case ID:
			Type();
			Identifier();
			label_4: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case 42:
					;
					break;
				default:
					jj_la1[4] = jj_gen;
					break label_4;
				}
				jj_consume_token(42);
				Type();
				Identifier();
			}
			break;
		default:
			jj_la1[5] = jj_gen;
			;
		}
		jj_consume_token(39);
		jj_consume_token(35);
		label_5: while (true) {
			if (jj_2_1(2)) {
				;
			} else {
				break label_5;
			}
			VarDeclaration();
		}
		label_6: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case WHILE:
			case IF:
			case ID:
			case 35:
			case 43:
				;
				break;
			default:
				jj_la1[6] = jj_gen;
				break label_6;
			}
			Statement();
		}
		jj_consume_token(RETURN);
		Expression();
		jj_consume_token(41);
		jj_consume_token(40);
	}

	static final public void Type() throws ParseException {
		if (jj_2_2(2)) {
			jj_consume_token(INT);
			jj_consume_token(37);
			jj_consume_token(38);
		} else {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case BOOLEAN:
				jj_consume_token(BOOLEAN);
				break;
			case INT:
				jj_consume_token(INT);
				break;
			case ID:
				Identifier();
				break;
			default:
				jj_la1[7] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	static final public void Statement() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case 35:
			jj_consume_token(35);
			label_7: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case WHILE:
				case IF:
				case ID:
				case 35:
				case 43:
					;
					break;
				default:
					jj_la1[8] = jj_gen;
					break label_7;
				}
				Statement();
			}
			jj_consume_token(40);
			break;
		case IF:
			jj_consume_token(IF);
			jj_consume_token(36);
			Expression();
			jj_consume_token(39);
			Statement();
			jj_consume_token(ELSE);
			Statement();
			break;
		case WHILE:
			jj_consume_token(WHILE);
			jj_consume_token(36);
			Expression();
			jj_consume_token(39);
			Statement();
			break;
		case 43:
			jj_consume_token(43);
			jj_consume_token(36);
			Expression();
			jj_consume_token(39);
			jj_consume_token(41);
			break;
		default:
			jj_la1[9] = jj_gen;
			if (jj_2_3(2)) {
				Identifier();
				jj_consume_token(44);
				Expression();
				jj_consume_token(41);
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case ID:
					Identifier();
					jj_consume_token(37);
					Expression();
					jj_consume_token(38);
					jj_consume_token(44);
					Expression();
					jj_consume_token(41);
					break;
				default:
					jj_la1[10] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		}
	}

	static final public void Identifier() throws ParseException {
		jj_consume_token(ID);
	}

	static final public void Expression() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case NEW:
		case THIS:
		case TRUE:
		case FALSE:
		case ID:
		case INTEGER_LITERAL:
		case 36:
			ExpressionPrim();
			label_8: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case OPAND:
				case OPLT:
				case OPPLUS:
				case OPMINUS:
				case OPTIMES:
				case 37:
				case 45:
					;
					break;
				default:
					jj_la1[11] = jj_gen;
					break label_8;
				}
				ExpressionTerm();
			}
			break;
		case OPNOT:
			jj_consume_token(OPNOT);
			Expression();
			break;
		default:
			jj_la1[12] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
	}

	static final public void ExpressionPrim() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case TRUE:
			jj_consume_token(TRUE);
			break;
		case FALSE:
			jj_consume_token(FALSE);
			break;
		case INTEGER_LITERAL:
			jj_consume_token(INTEGER_LITERAL);
			break;
		case ID:
			Identifier();
			break;
		case THIS:
			jj_consume_token(THIS);
			break;
		default:
			jj_la1[13] = jj_gen;
			if (jj_2_4(2)) {
				jj_consume_token(NEW);
				Identifier();
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case NEW:
					jj_consume_token(NEW);
					jj_consume_token(INT);
					jj_consume_token(37);
					Expression();
					jj_consume_token(38);
					break;
				case 36:
					jj_consume_token(36);
					Expression();
					jj_consume_token(39);
					break;
				default:
					jj_la1[14] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		}
	}

	static final public void ExpressionTerm() throws ParseException {
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case OPAND:
		case OPLT:
		case OPPLUS:
		case OPMINUS:
		case OPTIMES:
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case OPAND:
				jj_consume_token(OPAND);
				break;
			case OPLT:
				jj_consume_token(OPLT);
				break;
			case OPPLUS:
				jj_consume_token(OPPLUS);
				break;
			case OPMINUS:
				jj_consume_token(OPMINUS);
				break;
			case OPTIMES:
				jj_consume_token(OPTIMES);
				break;
			default:
				jj_la1[15] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			ExpressionPrim();
			break;
		case 37:
			jj_consume_token(37);
			Expression();
			jj_consume_token(38);
			break;
		default:
			jj_la1[18] = jj_gen;
			if (jj_2_5(2)) {
				jj_consume_token(45);
				jj_consume_token(LENGTH);
			} else {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case 45:
					jj_consume_token(45);
					Identifier();
					jj_consume_token(36);
					switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
					case OPNOT:
					case NEW:
					case THIS:
					case TRUE:
					case FALSE:
					case ID:
					case INTEGER_LITERAL:
					case 36:
						Expression();
						label_9: while (true) {
							switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
							case 42:
								;
								break;
							default:
								jj_la1[16] = jj_gen;
								break label_9;
							}
							jj_consume_token(42);
							Expression();
						}
						break;
					default:
						jj_la1[17] = jj_gen;
						;
					}
					jj_consume_token(39);
					break;
				default:
					jj_la1[19] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
		}
	}

	static private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	static private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	static private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	static private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	static private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	static private boolean jj_3R_10() {
		if (jj_3R_11())
			return true;
		if (jj_scan_token(27))
			return true;
		return false;
	}

	static private boolean jj_3_4() {
		if (jj_scan_token(NEW))
			return true;
		if (jj_scan_token(27))
			return true;
		return false;
	}

	static private boolean jj_3_5() {
		if (jj_scan_token(45))
			return true;
		if (jj_scan_token(LENGTH))
			return true;
		return false;
	}

	static private boolean jj_3_3() {
		if (jj_scan_token(27))
			return true;
		if (jj_scan_token(44))
			return true;
		return false;
	}

	static private boolean jj_3_1() {
		if (jj_3R_10())
			return true;
		return false;
	}

	static private boolean jj_3R_11() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3_2()) {
			jj_scanpos = xsp;
			if (jj_scan_token(20)) {
				jj_scanpos = xsp;
				if (jj_scan_token(19)) {
					jj_scanpos = xsp;
					if (jj_scan_token(27))
						return true;
				}
			}
		}
		return false;
	}

	static private boolean jj_3_2() {
		if (jj_scan_token(INT))
			return true;
		if (jj_scan_token(37))
			return true;
		return false;
	}

	static private boolean jj_initialized_once = false;
	/** Generated Token Manager. */
	static public MiniJavaParserTokenManager token_source;
	static JavaCharStream jj_input_stream;
	/** Current token. */
	static public Token token;
	/** Next token. */
	static public Token jj_nt;
	static private int jj_ntk;
	static private Token jj_scanpos, jj_lastpos;
	static private int jj_la;
	static private int jj_gen;
	static final private int[] jj_la1 = new int[20];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x2, 0x80, 0x8180000, 0x8, 0x0, 0x8180000,
				0x8800004, 0x8180000, 0x8800004, 0x800004, 0x8000000, 0x7c00,
				0x48618200, 0x48610000, 0x8000, 0x7c00, 0x0, 0x48618200,
				0x7c00, 0x0, };
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x400, 0x0, 0x808, 0x0,
				0x808, 0x808, 0x0, 0x2020, 0x10, 0x0, 0x10, 0x0, 0x400, 0x10,
				0x20, 0x2000, };
	}

	static final private JJCalls[] jj_2_rtns = new JJCalls[5];
	static private boolean jj_rescan = false;
	static private int jj_gc = 0;

	/** Constructor with InputStream. */
	public MiniJavaParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public MiniJavaParser(java.io.InputStream stream, String encoding) {
		if (jj_initialized_once) {
			System.out
			.println("ERROR: Second call to constructor of static parser.  ");
			System.out
			.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		try {
			jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new MiniJavaParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 20; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	static public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	static public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 20; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public MiniJavaParser(java.io.Reader stream) {
		if (jj_initialized_once) {
			System.out
			.println("ERROR: Second call to constructor of static parser. ");
			System.out
			.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		jj_input_stream = new JavaCharStream(stream, 1, 1);
		token_source = new MiniJavaParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 20; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	static public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 20; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public MiniJavaParser(MiniJavaParserTokenManager tm) {
		if (jj_initialized_once) {
			System.out
			.println("ERROR: Second call to constructor of static parser. ");
			System.out
			.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 20; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(MiniJavaParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 20; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	static private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	static private final class LookaheadSuccess extends java.lang.Error {
	}

	static final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	static private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source
						.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind)
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			throw jj_ls;
		return false;
	}

	/** Get the next Token. */
	static final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	static final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	static private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	static private int[] jj_expentry;
	static private int jj_kind = -1;
	static private int[] jj_lasttokens = new int[100];
	static private int jj_endpos;

	static private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries
					.iterator(); it.hasNext();) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/** Generate ParseException. */
	static public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[46];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 20; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 46; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	static final public void enable_tracing() {
	}

	/** Disable tracing. */
	static final public void disable_tracing() {
	}

	static private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 5; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						case 3:
							jj_3_4();
							break;
						case 4:
							jj_3_5();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	static private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
